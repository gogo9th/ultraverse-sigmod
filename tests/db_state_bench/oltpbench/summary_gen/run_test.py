from make_summary import read_db_state, read_log, set_result_path
import os
import sys
import time
import glob
import select
import subprocess
import fileinput


def help():
    print(
        'python3 run_test.py [hash/normal] [../epinions_run.sh] [-m1/-m2/-o]')
    print('hash : hash test query')
    print('normal : normal test query')
    print('m1 : hash on for mariadb server')
    print('m2 : hash off for mariadb server')
    exit(-1)


if len(sys.argv) != 4:
    help()

if sys.argv[1].lower() == 'hash':
    QUERY_TYPE = 'hash'
elif sys.argv[1].lower() == 'normal':
    QUERY_TYPE = 'normal'
else:
    help()

if sys.argv[3].lower() == '-m1':
    RUN_TYPE = 'hash_on'
    SCRIPT_PARAM = '-m'
elif sys.argv[3].lower() == '-m2':
    RUN_TYPE = 'hash_off'
    SCRIPT_PARAM = '-m'
elif sys.argv[3].lower() == '-o':
    RUN_TYPE = 'hash_off'
    SCRIPT_PARAM = '-o'
else:
    help()

SCRIPT_PATH = os.path.realpath(sys.argv[2])

CWD = os.path.dirname(SCRIPT_PATH)
SCRIPT_NAME = os.path.basename(SCRIPT_PATH).rsplit('.')[0]
WORKING_PATH = os.path.dirname(os.path.realpath(__file__))
BACKUP_PATH = '%s/%s_%d' % (WORKING_PATH, SCRIPT_NAME, time.time())

os.makedirs(BACKUP_PATH, exist_ok=True)

STD_OUT_NAME = 'output.txt'
BASE_SCRIPT_PATH = '../base_script/mysql_env.sh'
BASE_MYSQL_CONFIG_PATH = CWD + '/../base_script/db_state_server.cnf'


def get_param(cmd):
    return subprocess.check_output(
        ['/bin/bash', '-c', 'source ' + BASE_SCRIPT_PATH + '; set_test_modified; echo $%s' % cmd], cwd=CWD, encoding='utf-8').strip()


GENERAL_LOG_PATH = get_param('MYSQL_GENERAL_LOG_PATH')
MYSQL_LOG_PATH = get_param('MYSQL_LOG_PATH')


def copy_file(src, dst):
    os.system('\cp -rf %s %s' % (src, dst))


def move_file(src, dst):
    os.system('\mv -f %s %s' % (src, dst))


def backup_files():
    export_list = glob.glob('%s/*_modified' % MYSQL_LOG_PATH)

    move_file(STD_OUT_NAME, BACKUP_PATH)
    copy_file(GENERAL_LOG_PATH, BACKUP_PATH)
    for i in export_list:
        copy_file(i, BACKUP_PATH)


def summary():
    read_db_state(STD_OUT_NAME, False)
    read_log(GENERAL_LOG_PATH, '/* GENERATED BY STATE QUERY */')


if __name__ == '__main__':
    if QUERY_TYPE == 'hash':
        with fileinput.FileInput(SCRIPT_PATH, inplace=True, backup='.bak') as file:
            for line in file:
                if line.find('TEST_CASE=') < 0:
                    print(line, end='')
                else:
                    print('TEST_CASE="HASH"')
    else:
        with fileinput.FileInput(SCRIPT_PATH, inplace=True, backup='.bak') as file:
            for line in file:
                if line.find('TEST_CASE=') < 0:
                    print(line, end='')
                else:
                    print('TEST_CASE="NORMAL"')

    if RUN_TYPE == 'hash_on':
        with fileinput.FileInput(BASE_MYSQL_CONFIG_PATH, inplace=True, backup='.bak') as file:
            for line in file:
                if line.find('state_log_hash_use') < 0:
                    print(line, end='')
                else:
                    print('state_log_hash_use = 1')
    else:
        with fileinput.FileInput(BASE_MYSQL_CONFIG_PATH, inplace=True, backup='.bak') as file:
            for line in file:
                if line.find('state_log_hash_use') < 0:
                    print(line, end='')
                else:
                    print('state_log_hash_use = 0')

    print('subprocess popen %s %s' % (SCRIPT_PATH, SCRIPT_PARAM))
    with subprocess.Popen([SCRIPT_PATH, SCRIPT_PARAM],
                          cwd=CWD, stdout=subprocess.PIPE, stderr=subprocess.PIPE, encoding='utf-8') as p:

        print('subprocess output -> %s' % STD_OUT_NAME)

        with open(STD_OUT_NAME, mode='w') as f:
            while True:
                line = p.stdout.readline()
                if not line:
                    break
                print(line, end='')
                f.write(line)
                f.flush()
            f.close()
        p.wait(3)

    print('subprocess exit success')

    set_result_path('%s/result.txt' % BACKUP_PATH)
    summary()
    backup_files()

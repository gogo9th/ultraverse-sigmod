import subprocess
from datetime import datetime

from django.db import (
    DEFAULT_DB_ALIAS, Error, connection, transaction
)

STATE_GROUP_DATABASE = 'STATE_GROUP_DB'
STATE_GROUP_TABLE = 'STATE_GROUP_TABLE'
STATE_GROUP_COMMENT_STRING = '/* GENERATED BY STATE GROUP */'
STATE_GROUP_BIN_PATH = 'db_state_change'


def _get_group_id():
    from django.db.backends.mysql.base import DatabaseWrapper

    if connection.display_name is not DatabaseWrapper.display_name:
        return None

    cursor = connection.cursor()
    try:
        cursor.execute(
            "CREATE DATABASE IF NOT EXISTS " + STATE_GROUP_DATABASE)

        cursor.execute(
            "CREATE TABLE IF NOT EXISTS `%s`.`%s` "
            "(`group_id` INT NOT NULL AUTO_INCREMENT, "
            " `time` TIMESTAMP(6) NULL DEFAULT NULL, "
            "INDEX `group_id` (`group_id`, `time`))"
            % (STATE_GROUP_DATABASE, STATE_GROUP_TABLE))

        cnt = cursor.execute(
            "SELECT AUTO_INCREMENT FROM information_schema.`TABLES` "
            "WHERE TABLE_SCHEMA='%s' AND TABLE_NAME='%s'"
            % (STATE_GROUP_DATABASE, STATE_GROUP_TABLE))

        if cnt != 1:
            return None

        grp_id = cursor.fetchone()[0]

        # 할당받은 id 로 기록된 예전 내용은 전부 삭제
        cursor.execute(
            "DELETE FROM `%s`.`%s` WHERE `group_id`=%d"
            % (STATE_GROUP_DATABASE, STATE_GROUP_TABLE, grp_id))

        # auto increment 로 할당받은 id 를 확보
        # 같은 id 를 할당받지 못하도록 방지
        datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')
        cursor.execute(
            "INSERT INTO `%s`.`%s` (`group_id`, `time`) VALUES (%d, '%s')"
            % (STATE_GROUP_DATABASE, STATE_GROUP_TABLE, grp_id, datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')))

    except Error as e:
        return None

    return grp_id


def STATE_DB_ABORT(grp_id):
    return subprocess.run([STATE_GROUP_BIN_PATH, "-uroot", "-p123456", "--gid", str(grp_id)])
    # return subprocess.run([STATE_GROUP_BIN_PATH, "-uroot", "-p123456", "--gid", str(grp_id), "--graph", "1.svg"])


def STATE_DB_BLOCK_EXECUTE(func, *args):
    grp_id = _get_group_id()
    if grp_id is None:
        return None

    from django.db.backends.mysql.base import CursorWrapper

    CursorWrapper.set_grp_id(grp_id)

    func(*args)

    CursorWrapper.unset_grp_id(connection.cursor())

    return grp_id
